extends:
  - "@stoplight/spectral-owasp-ruleset"

functions: [checkSensitiveFields]

rules:

  # Author: Team Digitale https://github.com/teamdigitale/api-openapi-samples/blob/master/.spectral.yml
  # Renamed to match rule naming convention used here
  owasp:api3:2023-no-additionalProperties:
    description: |-
      By default, jsonschema allows additionalProperties. This means
      that schema validators can be bypassed using further, unspecified
      fields.
      
      While forbidding additionalProperties can create rigidity and hinder
      the evolution of an API - eg making it hard to accept new parameters
      or fields - it is possible that this flexibility can be used
      to bypass the schema validator and force the application to process
      unwanted information.
      
      Disable `additionalProperties` with `false`
      
      ```
      Person:
        type: object
        additionalProperties: false
        properties:
          given_name:
            type: string
            pattern: [a-zA-Z ]{24}
      ```
      
      Or constraint them using `maxProperties`
      
      ```
      Person:
        type: object
        additionalProperties:
          type: string
          pattern: /+39[0-9]{,14}/
        maxProperties: 3
        properties:
          given_name:
            type: string
            pattern: [a-zA-Z ]{24}
      ```
      - no additionalProperties
      - constrained additionalProperties
    message: "Objects should not allow additionalProperties. Disable them with
     `additionalProperties: false` or constraint them."
    formats:
      - oas3
    severity: warn
    recommended: true
    given:
      - $.[?(@.type=="object" && @.additionalProperties==true)]
    then:
      - field: additionalProperties
        function: falsy

  # Author: Team Digitale https://github.com/teamdigitale/api-openapi-samples/blob/master/.spectral.yml
  # Renamed to match rule naming convention used here
  owasp:api3:2023-no-default-additionalProperties:
    description: |-
      By default, jsonschema allows additionalProperties. This means
      that schema validators can be bypassed using further, unspecified
      fields.
      
      While forbidding additionalProperties can create rigidity and hinder
      the evolution of an API - eg making it hard to accept new parameters
      or fields - it is possible that this flexibility can be used
      to bypass the schema validator and force the application to process
      unwanted information.
      
      Disable `additionalProperties` with `false`
      
      ```
      Person:
        type: object
        additionalProperties: false
        properties:
          given_name:
            type: string
            pattern: [a-zA-Z ]{24}
      ```
      
      Or constraint them using `maxProperties`
      
      ```
      Person:
        type: object
        additionalProperties:
          type: string
          pattern: /+39[0-9]{,14}/
        maxProperties: 3
        properties:
          given_name:
            type: string
            pattern: [a-zA-Z ]{24}
      ```
      - no additionalProperties
      - constrained additionalProperties
    message: "Objects should not allow additionalProperties. Disable them with
     `additionalProperties: false` or constrain them."
    formats:
      - oas3
    severity: warn
    recommended: true
    given:
      - $.[?(@.type=="object" && ! @.additionalProperties)]
    then:
      - field: additionalProperties
        function: defined

  # Author: Team Digitale https://github.com/teamdigitale/api-openapi-samples/blob/master/.spectral.yml
  # Renamed to match rule naming convention used here
  owasp:api3:2023-constrained-additionalProperties:
    description: |-
      By default, jsonschema allows additionalProperties. This means
      that schema validators can be bypassed using further, unspecified
      fields.
      
      While forbidding additionalProperties can create rigidity and hinder
      the evolution of an API - eg making it hard to accept new parameters
      or fields - it is possible that this flexibility can be used
      to bypass the schema validator and force the application to process
      unwanted information.
      
      Disable `additionalProperties` with `false`
      
      ```
      Person:
        type: object
        additionalProperties: false
        properties:
          given_name:
            type: string
            pattern: [a-zA-Z ]{24}
      ```
      
      Or constraint them using `maxProperties`
      
      ```
      Person:
        type: object
        additionalProperties:
          type: string
          pattern: /+39[0-9]{,14}/
        maxProperties: 3
        properties:
          given_name:
            type: string
            pattern: [a-zA-Z ]{24}
      ```
      - no additionalProperties
      - constrained additionalProperties
    message: "Objects should not allow additionalProperties. Disable them with
     `additionalProperties: false` or constraint them."
    formats:
      - oas3
    severity: warn
    recommended: true
    given:
      - $.[?(@.type=="object" && @.additionalProperties
        &&  @.additionalProperties!=true &&  @.additionalProperties!=false )]
    then:
      - field: maxProperties
        function: defined


  # Author: Monite https://github.com/team-monite/api-style-guide/blob/main/spectral/monite.section3-security.yaml
  # Renamed to match rule naming convention used here
  owasp:api2:2023-security-no-secrets-in-path-or-query-parameters:
    message: Secrets, tokens, passwords and api keys must be passed in headers, not in path or query parameters
    severity: error
    given:
      - "$..parameters[?(@ && @.in && @.in.match(/path/))].name"
      - "$..parameters[?(@ && @.in && @.in.match(/query/))].name"
    then:
      function: pattern
      functionOptions:
        notMatch: /^(client_secret|token|access_token|refresh_token|id_token|password|secret|apikey)$/i

  owasp:api3:2023-sensitive-fields-in-response:
    description: Detect sensitive fields in response
    message: Possible sensitive fields in response. {{error}}
    severity: warn
    given: "$..responses.*.content.*.schema"
    then:
      function: checkSensitiveFields
      functionOptions:
        sensitiveFields:
          - email
          - vehicleid
          - vehicleLocation


# overrides:
#   - files:
#       - "crapi.api.yaml#/paths/~1identity~1api~1auth~1signup"
#       - "crapi.api.yaml#/paths/~1identity~1api~1auth~1login"
#       - "crapi.api.yaml#/paths/~1identity~1api~1auth~1v4.0~1user~1login-with-token"
#       - "crapi.api.yaml#/paths/~1identity~1api~1auth~1v2.7~1user~1login-with-token"
#       - "crapi.api.yaml#/paths/~1identity~1api~1auth~1forget-password"
#       - "crapi.api.yaml#/paths/~1identity~1api~1v2~1user~1reset-password"
#       - "crapi.api.yaml#/paths/~1identity~1api~1v3~1check-otp"
#       - "crapi.api.yaml#/paths/~1identity~1api~1auth~1v2~1check-otp"
#       - "crapi.api.yaml#/paths/~1identity~1api~1auth~1v3~1check-otp"
#       - "crapi.api.yaml#/paths/~1identity~1api~1v2~1user~1change-email"
#       - "crapi.api.yaml#/paths/~1identity~1api~1v2~1user~1verify-email-token"
#     rules:
#       owasp:api2:2019-protection-global-unsafe: "off"
#       owasp:api2:2019-protection-global-unsafe-strict: "off" 
#       owasp:api3:2019-define-error-responses-401: "off"

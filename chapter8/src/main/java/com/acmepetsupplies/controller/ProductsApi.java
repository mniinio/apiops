/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.acmepetsupplies.controller;

import com.acmepetsupplies.model.*;

import java.math.BigDecimal;
import java.util.*;

import com.acmepetsupplies.model.Error;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-06-18T20:17:33.879399+01:00[Europe/London]")
@Validated
@Tag(name = "Products", description = "A product is an item for sale on the store.")
public interface ProductsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /v1/catalog/products : List all products
     * List all products.
     *
     * @param include        List of included related resources (optional)
     * @param filterCategory Filter by category ID. (optional)
     * @return OK (status code 200)
     * or Not authorized (status code 401)
     * or Forbidden (status code 403)
     * or Not Acceptable (status code 406)
     * or 415 Unsupported Media Type (status code 415)
     * or 429 Too Many Requests (status code 429)
     * or 500 Internal Server Error (status code 500)
     */
    @Operation(
            operationId = "listProducts",
            summary = "List all products",
            description = "List all products.",
            tags = {"Products"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                            @Content(mediaType = "application/vnd.api+json", schema = @Schema(implementation = ProductsResponse.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Not authorized", content = {
                            @Content(mediaType = "application/vnd.api+json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                            @Content(mediaType = "application/vnd.api+json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "406", description = "Not Acceptable", content = {
                            @Content(mediaType = "application/vnd.api+json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "415", description = "415 Unsupported Media Type", content = {
                            @Content(mediaType = "application/vnd.api+json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "429", description = "429 Too Many Requests", content = {
                            @Content(mediaType = "application/vnd.api+json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "500 Internal Server Error", content = {
                            @Content(mediaType = "application/vnd.api+json", schema = @Schema(implementation = Error.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "OAuth2", scopes = {})
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/v1/catalog/products",
            produces = {"application/vnd.api+json"}
    )
    default ResponseEntity<ProductsResponse> listProducts(
            @Size(max = 30) @Parameter(name = "include", description = "List of included related resources", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) String include,
            @Size(max = 40) @Parameter(name = "filterCategory", description = "Filter by category ID.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filterCategory", required = false) UUID filterCategory
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/vnd.api+json"))) {
                    String exampleString = "Custom MIME type example not yet supported: application/vnd.api+json";
                    ApiUtil.setExampleResponse(request, "application/vnd.api+json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/catalog/products/{id} : View a product&#39;s details
     * View a product&#39;s details.
     *
     * @param id Product identifier (required)
     * @return OK (status code 200)
     * or Bad Request (status code 400)
     * or Not authorized (status code 401)
     * or Forbidden (status code 403)
     * or Not Found (status code 404)
     * or Not Acceptable (status code 406)
     * or 415 Unsupported Media Type (status code 415)
     * or 429 Too Many Requests (status code 429)
     * or 500 Internal Server Error (status code 500)
     */
    @Operation(
            operationId = "viewProduct",
            summary = "View a product's details",
            description = "View a product's details.",
            tags = {"Products"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                            @Content(mediaType = "application/vnd.api+json", schema = @Schema(implementation = ViewProduct200Response.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/vnd.api+json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Not authorized", content = {
                            @Content(mediaType = "application/vnd.api+json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                            @Content(mediaType = "application/vnd.api+json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/vnd.api+json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "406", description = "Not Acceptable", content = {
                            @Content(mediaType = "application/vnd.api+json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "415", description = "415 Unsupported Media Type", content = {
                            @Content(mediaType = "application/vnd.api+json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "429", description = "429 Too Many Requests", content = {
                            @Content(mediaType = "application/vnd.api+json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "500 Internal Server Error", content = {
                            @Content(mediaType = "application/vnd.api+json", schema = @Schema(implementation = Error.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "OAuth2", scopes = {})
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/v1/catalog/products/{id}",
            produces = {"application/vnd.api+json"}
    )
    default ResponseEntity<ViewProduct200Response> viewProduct(
            @Parameter(name = "id", description = "Product identifier", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        try {
            MediaType mediaType = MediaType.parseMediaType(getRequest().get().getHeader("Accept"));
            if (!mediaType.isCompatibleWith(MediaType.valueOf("application/vnd.api+json"))) {
                return new ResponseEntity<>(HttpStatus.UNSUPPORTED_MEDIA_TYPE);
            }
        } catch (RuntimeException e) {
            return new ResponseEntity<>(HttpStatus.UNSUPPORTED_MEDIA_TYPE);
        }

        ProductAttributes attributes = new ProductAttributes();
        attributes.setName("Acme Uber Dog Rope Toy");
        attributes.setDescription("Acme Uber Dog Rope Toy provides hours of fun for your dog.");
        attributes.setPrice(new BigDecimal(50));
        attributes.setKeywords(new HashSet<>(Arrays.asList("rope", "toy", "dog")));
        attributes.setNumberOfReviews(16);
        attributes.reviewRating(4);
        Product product = new Product(id.toString(), "product", attributes, createProductRelationships());
        product.setId(id.toString());
        ViewProduct200Response response = new ViewProduct200Response();
        response.data(product);
        return new ResponseEntity<ViewProduct200Response>(response, HttpStatus.OK);
    }

    private ProductRelationships createProductRelationships() {
        ProductRelationshipsHasReviewsLinks links = new ProductRelationshipsHasReviewsLinks();
        links.setRelated("/v1/catalog/products/dcd53ddb-8104-4e48-8cc0-5df1088c6113/reviews");
        ProductRelationshipsHasReviews hasReviews = new ProductRelationshipsHasReviews();
        hasReviews.setLinks(links);
        ProductRelationships relationships = new ProductRelationships();
        relationships.setHasReviews(hasReviews);
        ProductRelationshipsInCategories inCategories = new ProductRelationshipsInCategories();
        ProductRelationshipsInCategoriesDataInner dataInner = new ProductRelationshipsInCategoriesDataInner();
        dataInner.setType("toys");
        dataInner.setId(UUID.fromString("dcd53ddb-8104-4e48-8cc0-5df1088c6113"));
        inCategories.setData(List.of(dataInner));
        relationships.setInCategories(inCategories);
        return relationships;
    }

}

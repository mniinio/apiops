name: Deployment pipeline

on:
  push:
    branches:
      - main
env:
  GITHUB_RUN_NUMBER: ${{ github.run_number }}
jobs:
  pipeline:
    name: Pipeline
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Build - Checkout
        uses: actions/checkout@v3
      - name: Build - Start background services (Kong gateway and Apicurio API registry)
        run: |
          docker compose -f chapter9/compose.yaml up -d
      - name: Build - Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build - Check Java version
        run: |
          mvn -version
          echo $JAVA_HOME
      - name: Build - Create application jar
        run: |
          cd chapter8
          ./run_app_build.sh
      - name: Build - Log in to the GitHub Container Registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build - Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/products-api-service:${{ github.run_number }}
          file: chapter8/Dockerfile
      - name: Build - Create output directory for API artifacts
        run: mkdir build-output
      - name: Build - Bundle API definition file
        run: |
          cd chapter8/apis/product-catalog-api
          npx @redocly/cli bundle openapi.yaml --output api.bundled.yaml
          mv api.bundled.yaml ../../../build-output/api.bundled.yaml
      - name: Build - Filter internal endpoints
        run: |
          npx openapi-filter --flags x-internal --verbose -- build-output/api.bundled.yaml build-output/api.yaml
      - name: Build - Remove unused components
        run: |
          npx openapi-format build-output/api.yaml --filterFile chapter9/unused-components-filter.yaml --sortFile chapter9/sort.json --output build-output/api.yaml
      - name: Build - Run API linting
        run: |
          npx @stoplight/spectral-cli lint build-output/api.yaml --ruleset chapter8/apis/rulesets/json-api.ruleset.yaml
      - name: Build - Archive artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-after-linting
          path: |
            build-output
      - name: Build - Publish updated API definition to registry
        run: |
          curl -v -X POST 'http://localhost:9090/apis/registry/v2/groups/acmeapis/artifacts?ifExists=UPDATE'    \
           --header 'Content-Type: application/x-yaml'     \
           --header 'X-Registry-ArtifactId: productsapi'    \
           --header 'X-Registry-ArtifactType: OPENAPI'     \
           --data-binary "@build-output/api.yaml"    \
           --output created-artifact.json   \
           --fail-with-body
      - name: Build - Get created artifact version
        id: artifact-version
        run: |
          echo "ARTIFACT_VERSION=$(cat created-artifact.json jq -j '.version')"  >> $GITHUB_OUTPUT
